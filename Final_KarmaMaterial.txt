########################### CREATED BY SHUAYB MALIK###########################
########################### Setup ###########################

import hou
from PySide2 import QtWidgets
import os

stage = hou.node("/stage")
path = None

########################### PySide ###########################

def onDirectorySelected(directory): #Linking directory back into the scene
    global path
    path = directory
    

# Create a file browser
file_browser = QtWidgets.QFileDialog()
file_browser.setWindowTitle("Please select a directory")
file_browser.setFileMode(QtWidgets.QFileDialog.Directory)
file_browser.directoryEntered.connect(onDirectorySelected)

# Run File Browser
PySide = file_browser.exec_()




########################### Functions ###########################

def findNodes(_args):   #Find all of the specified node
    nodes = []  
    for node in stage.children():   #For each node in stage
        if node.type().name() == _args: #If node is the same type as input
            nodes.append(node)  #Add to array
    return nodes




def selectNode(_args):  #Pop up window to select between nodes given
    selected_node = None
    
    #If empty
    if len(_args) == 0:
        hou.ui.displayMessage("No Material Libraries found.")
        return None
        
    #If 1
    elif len(_args) == 1:
        return _args[0]
        
    #Create PySide Window Selection
    else:
        #Main Window
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Select a node")
        layout = QtWidgets.QVBoxLayout()
        dialog.setLayout(layout)
        #Label
        label = QtWidgets.QLabel("Multiple Material Library nodes found. Please choose one:")
        layout.addWidget(label)
        #List
        list_widget = QtWidgets.QListWidget()
        layout.addWidget(list_widget)
        for library in _args:
            list_widget.addItem(library.path())
        #Buttons
        button_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok)
        layout.addWidget(button_box)
        

        def accept():
            nonlocal selected_node #force in selected node
            selected_index = list_widget.currentRow() #selected index is the currently selected node
            if selected_index >= 0: #if its set to something
                selected_node = _args[selected_index] #set it to selected node
                dialog.accept() #accept and close the window
        button_box.accepted.connect(accept) #sets the signal to be accepted

        if dialog.exec_() == QtWidgets.QDialog.Accepted: #if the function has the accepted signal
            return selected_node


            
def getUserInput(): #Pop up window to get user input
    dialog = QtWidgets.QInputDialog()
    dialog.setWindowTitle("Filter")
    dialog.setLabelText("Please enter text filter\nLeave blank if none:")

    if dialog.exec_() == QtWidgets.QDialog.Accepted:
        return dialog.textValue()
    else:
        return None
            
            
            
            
            
def createKarmaMaterial(selected_node, path): #Creates the Karma Material

    #Make material with the name of the folder of the selected textures
    split_path = path.split("/")
    name = split_path[-1]
    subnetwork = selected_node.createNode("subnet", name)


    # Create nodes within the subnetwork
    standard_surface = subnetwork.createNode("mtlxstandard_surface", "mtlxstandard_surface")
    properties = subnetwork.createNode("kma_material_properties", "material_properties")
    
    #Find Auto-generated output node
    for node in subnetwork.children():
        if node.name() == "suboutput1":
            output = node
    output.setName("Material_Outputs_and_AOVs")
    
    #Set Links
    output.setInput(0, standard_surface, 0)
    output.setInput(1, properties, 0)
    
    folder = os.listdir(path)
    filter = getUserInput()

    #Setting alternate names for textures
    albedo_vars = ["albedo", "Albedo", "diffuse", "Diffuse"]
    displacement_vars = ["height", "Height", "displacement", "Displacement"]
    normal_vars = ["normal", "Normal"]
    opacity_vars = ["opacity", "Opacity"]
    roughness_vars = ["roughness", "Roughness"]
    subsurface_vars = ["subsurface", "Subsurface", "translucency", "Translucency"]

    texture_extensions = ["png", "jpg", "jpeg"]
    
    #filter = (r"_16384")
    
    #Checks to get to the right file
    for file in folder: 
        for extension in texture_extensions: 
            if file.endswith(extension) and (filter) in file:
                texture_paths = (path + "/" + file)
                #Albedo
                for var in albedo_vars:
                    if var in texture_paths:
                        albedo_texture = subnetwork.createNode("mtlximage", "Albedo_Map")
                        standard_surface.setInput(1, albedo_texture,0)
                        albedo_texture.parm("file").set(texture_paths)
                    else:
                        pass
                #Roughness
                for var in roughness_vars:
                    if var in texture_paths:
                        roughness_texture = subnetwork.createNode("mtlximage", "Roughness_Map")
                        standard_surface.setInput(7, roughness_texture,0)
                        roughness_texture.parm("signature").set("default")
                        roughness_texture.parm("file").set(texture_paths)
                    else:
                        pass
                #Normal
                for var in normal_vars:
                    if var in texture_paths:
                        normal_texture = subnetwork.createNode("mtlximage", "Normal_Map")
                        normal_map = subnetwork.createNode("mtlxnormalmap")
                        standard_surface.setInput(40, normal_map,0)
                        normal_texture.parm("file").set(texture_paths)
                        normal_map.setInput(0, normal_texture,0)
                        normal_texture.parm("signature").set("vector3")
                    else:
                        pass
                #Opacity
                for var in opacity_vars:
                    if var in texture_paths:
                        opacity_texture = subnetwork.createNode("mtlximage", "Opacity_Map")
                        standard_surface.setInput(38, opacity_texture,0)
                        opacity_texture.parm("file").set(texture_paths)
                    else:
                        pass
                #Displacement
                for var in displacement_vars:
                    if var in texture_paths:
                        displacement_texture = subnetwork.createNode("mtlximage", "Displacement_Map")
                        displacement = subnetwork.createNode("mtlxdisplacement")
                        displacement_remap = subnetwork.createNode("mtlxremap")
                        displacement.setInput(0, displacement_remap,0)
                        displacement_remap.setInput(0, displacement_texture,0)
                        displacement_texture.parm("file").set(texture_paths)
                        displacement_texture.parm("signature").set("default")
                        output.setInput(2, displacement, 0)
                        displacement_remap.parm("signature").set("color3FA")
                        displacement_remap.parm("outlow").set(-0.5)
                        displacement_remap.parm("outhigh").set(0.5)
                    else:
                        pass
                 #Subsurface
                for var in subsurface_vars:
                    if var in texture_paths:
                        subsurface_texture = subnetwork.createNode("mtlximage", "Subsurface_Map")
                        standard_surface.setInput(18, subsurface_texture,0)
                        subsurface_texture.parm("file").set(texture_paths)
                    else:
                        pass

    subnetwork.layoutChildren()
    selected_node.layoutChildren()
    subnetwork.setMaterialFlag(True)

if PySide == 1:
    try:
        all_material_libraries = findNodes("materiallibrary")
        selected_material_library = selectNode(all_material_libraries)
        if selected_material_library and path:
            createKarmaMaterial(selected_material_library, path)
    except:
        pass

else:
    print("File Selection Cancelled")
                    